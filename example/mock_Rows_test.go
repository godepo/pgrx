// Code generated by mockery v2.40.3. DO NOT EDIT.

package example

import (
	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// MockRows is an autogenerated mock type for the Rows type
type MockRows struct {
	mock.Mock
}

type MockRows_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRows) EXPECT() *MockRows_Expecter {
	return &MockRows_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockRows) Close() {
	_m.Called()
}

// MockRows_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRows_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRows_Expecter) Close() *MockRows_Close_Call {
	return &MockRows_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRows_Close_Call) Run(run func()) *MockRows_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRows_Close_Call) Return() *MockRows_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRows_Close_Call) RunAndReturn(run func()) *MockRows_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CommandTag provides a mock function with given fields:
func (_m *MockRows) CommandTag() pgconn.CommandTag {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CommandTag")
	}

	var r0 pgconn.CommandTag
	if rf, ok := ret.Get(0).(func() pgconn.CommandTag); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	return r0
}

// MockRows_CommandTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandTag'
type MockRows_CommandTag_Call struct {
	*mock.Call
}

// CommandTag is a helper method to define mock.On call
func (_e *MockRows_Expecter) CommandTag() *MockRows_CommandTag_Call {
	return &MockRows_CommandTag_Call{Call: _e.mock.On("CommandTag")}
}

func (_c *MockRows_CommandTag_Call) Run(run func()) *MockRows_CommandTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRows_CommandTag_Call) Return(_a0 pgconn.CommandTag) *MockRows_CommandTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRows_CommandTag_Call) RunAndReturn(run func() pgconn.CommandTag) *MockRows_CommandTag_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function with given fields:
func (_m *MockRows) Conn() *pgx.Conn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 *pgx.Conn
	if rf, ok := ret.Get(0).(func() *pgx.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgx.Conn)
		}
	}

	return r0
}

// MockRows_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type MockRows_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *MockRows_Expecter) Conn() *MockRows_Conn_Call {
	return &MockRows_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *MockRows_Conn_Call) Run(run func()) *MockRows_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRows_Conn_Call) Return(_a0 *pgx.Conn) *MockRows_Conn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRows_Conn_Call) RunAndReturn(run func() *pgx.Conn) *MockRows_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with given fields:
func (_m *MockRows) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRows_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockRows_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockRows_Expecter) Err() *MockRows_Err_Call {
	return &MockRows_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockRows_Err_Call) Run(run func()) *MockRows_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRows_Err_Call) Return(_a0 error) *MockRows_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRows_Err_Call) RunAndReturn(run func() error) *MockRows_Err_Call {
	_c.Call.Return(run)
	return _c
}

// FieldDescriptions provides a mock function with given fields:
func (_m *MockRows) FieldDescriptions() []pgconn.FieldDescription {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FieldDescriptions")
	}

	var r0 []pgconn.FieldDescription
	if rf, ok := ret.Get(0).(func() []pgconn.FieldDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgconn.FieldDescription)
		}
	}

	return r0
}

// MockRows_FieldDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FieldDescriptions'
type MockRows_FieldDescriptions_Call struct {
	*mock.Call
}

// FieldDescriptions is a helper method to define mock.On call
func (_e *MockRows_Expecter) FieldDescriptions() *MockRows_FieldDescriptions_Call {
	return &MockRows_FieldDescriptions_Call{Call: _e.mock.On("FieldDescriptions")}
}

func (_c *MockRows_FieldDescriptions_Call) Run(run func()) *MockRows_FieldDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRows_FieldDescriptions_Call) Return(_a0 []pgconn.FieldDescription) *MockRows_FieldDescriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRows_FieldDescriptions_Call) RunAndReturn(run func() []pgconn.FieldDescription) *MockRows_FieldDescriptions_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields:
func (_m *MockRows) Next() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRows_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockRows_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockRows_Expecter) Next() *MockRows_Next_Call {
	return &MockRows_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockRows_Next_Call) Run(run func()) *MockRows_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRows_Next_Call) Return(_a0 bool) *MockRows_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRows_Next_Call) RunAndReturn(run func() bool) *MockRows_Next_Call {
	_c.Call.Return(run)
	return _c
}

// RawValues provides a mock function with given fields:
func (_m *MockRows) RawValues() [][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RawValues")
	}

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// MockRows_RawValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawValues'
type MockRows_RawValues_Call struct {
	*mock.Call
}

// RawValues is a helper method to define mock.On call
func (_e *MockRows_Expecter) RawValues() *MockRows_RawValues_Call {
	return &MockRows_RawValues_Call{Call: _e.mock.On("RawValues")}
}

func (_c *MockRows_RawValues_Call) Run(run func()) *MockRows_RawValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRows_RawValues_Call) Return(_a0 [][]byte) *MockRows_RawValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRows_RawValues_Call) RunAndReturn(run func() [][]byte) *MockRows_RawValues_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: dest
func (_m *MockRows) Scan(dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRows_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockRows_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest ...interface{}
func (_e *MockRows_Expecter) Scan(dest ...interface{}) *MockRows_Scan_Call {
	return &MockRows_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *MockRows_Scan_Call) Run(run func(dest ...interface{})) *MockRows_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockRows_Scan_Call) Return(_a0 error) *MockRows_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRows_Scan_Call) RunAndReturn(run func(...interface{}) error) *MockRows_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// Values provides a mock function with given fields:
func (_m *MockRows) Values() ([]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRows_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type MockRows_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
func (_e *MockRows_Expecter) Values() *MockRows_Values_Call {
	return &MockRows_Values_Call{Call: _e.mock.On("Values")}
}

func (_c *MockRows_Values_Call) Run(run func()) *MockRows_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRows_Values_Call) Return(_a0 []interface{}, _a1 error) *MockRows_Values_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRows_Values_Call) RunAndReturn(run func() ([]interface{}, error)) *MockRows_Values_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRows creates a new instance of MockRows. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRows(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRows {
	mock := &MockRows{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
