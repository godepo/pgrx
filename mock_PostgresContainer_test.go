// Code generated by mockery v2.53.3. DO NOT EDIT.

package pgrx

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPostgresContainer is an autogenerated mock type for the PostgresContainer type
type MockPostgresContainer struct {
	mock.Mock
}

type MockPostgresContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostgresContainer) EXPECT() *MockPostgresContainer_Expecter {
	return &MockPostgresContainer_Expecter{mock: &_m.Mock}
}

// ConnectionString provides a mock function with given fields: ctx, args
func (_m *MockPostgresContainer) ConnectionString(ctx context.Context, args ...string) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConnectionString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (string, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) string); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostgresContainer_ConnectionString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectionString'
type MockPostgresContainer_ConnectionString_Call struct {
	*mock.Call
}

// ConnectionString is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...string
func (_e *MockPostgresContainer_Expecter) ConnectionString(ctx interface{}, args ...interface{}) *MockPostgresContainer_ConnectionString_Call {
	return &MockPostgresContainer_ConnectionString_Call{Call: _e.mock.On("ConnectionString",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockPostgresContainer_ConnectionString_Call) Run(run func(ctx context.Context, args ...string)) *MockPostgresContainer_ConnectionString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockPostgresContainer_ConnectionString_Call) Return(_a0 string, _a1 error) *MockPostgresContainer_ConnectionString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostgresContainer_ConnectionString_Call) RunAndReturn(run func(context.Context, ...string) (string, error)) *MockPostgresContainer_ConnectionString_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function with given fields: _a0
func (_m *MockPostgresContainer) Terminate(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostgresContainer_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type MockPostgresContainer_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockPostgresContainer_Expecter) Terminate(_a0 interface{}) *MockPostgresContainer_Terminate_Call {
	return &MockPostgresContainer_Terminate_Call{Call: _e.mock.On("Terminate", _a0)}
}

func (_c *MockPostgresContainer_Terminate_Call) Run(run func(_a0 context.Context)) *MockPostgresContainer_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPostgresContainer_Terminate_Call) Return(_a0 error) *MockPostgresContainer_Terminate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPostgresContainer_Terminate_Call) RunAndReturn(run func(context.Context) error) *MockPostgresContainer_Terminate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostgresContainer creates a new instance of MockPostgresContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostgresContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostgresContainer {
	mock := &MockPostgresContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
